// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package customisation

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// InstanceCustomisationPluginClient is the client API for InstanceCustomisationPlugin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InstanceCustomisationPluginClient interface {
	// Attempts to add additional runtime options to the UE application
	RuntimeOptions(ctx context.Context, in *RuntimeOptionsRequest, opts ...grpc.CallOption) (*RuntimeOptionsResponse, error)
}

type instanceCustomisationPluginClient struct {
	cc grpc.ClientConnInterface
}

func NewInstanceCustomisationPluginClient(cc grpc.ClientConnInterface) InstanceCustomisationPluginClient {
	return &instanceCustomisationPluginClient{cc}
}

func (c *instanceCustomisationPluginClient) RuntimeOptions(ctx context.Context, in *RuntimeOptionsRequest, opts ...grpc.CallOption) (*RuntimeOptionsResponse, error) {
	out := new(RuntimeOptionsResponse)
	err := c.cc.Invoke(ctx, "/proto.InstanceCustomisationPlugin/RuntimeOptions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InstanceCustomisationPluginServer is the server API for InstanceCustomisationPlugin service.
// All implementations must embed UnimplementedInstanceCustomisationPluginServer
// for forward compatibility
type InstanceCustomisationPluginServer interface {
	// Attempts to add additional runtime options to the UE application
	RuntimeOptions(context.Context, *RuntimeOptionsRequest) (*RuntimeOptionsResponse, error)
	mustEmbedUnimplementedInstanceCustomisationPluginServer()
}

// UnimplementedInstanceCustomisationPluginServer must be embedded to have forward compatible implementations.
type UnimplementedInstanceCustomisationPluginServer struct {
}

func (UnimplementedInstanceCustomisationPluginServer) RuntimeOptions(context.Context, *RuntimeOptionsRequest) (*RuntimeOptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RuntimeOptions not implemented")
}
func (UnimplementedInstanceCustomisationPluginServer) mustEmbedUnimplementedInstanceCustomisationPluginServer() {
}

// UnsafeInstanceCustomisationPluginServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InstanceCustomisationPluginServer will
// result in compilation errors.
type UnsafeInstanceCustomisationPluginServer interface {
	mustEmbedUnimplementedInstanceCustomisationPluginServer()
}

func RegisterInstanceCustomisationPluginServer(s grpc.ServiceRegistrar, srv InstanceCustomisationPluginServer) {
	s.RegisterService(&InstanceCustomisationPlugin_ServiceDesc, srv)
}

func _InstanceCustomisationPlugin_RuntimeOptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RuntimeOptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstanceCustomisationPluginServer).RuntimeOptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.InstanceCustomisationPlugin/RuntimeOptions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstanceCustomisationPluginServer).RuntimeOptions(ctx, req.(*RuntimeOptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// InstanceCustomisationPlugin_ServiceDesc is the grpc.ServiceDesc for InstanceCustomisationPlugin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InstanceCustomisationPlugin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.InstanceCustomisationPlugin",
	HandlerType: (*InstanceCustomisationPluginServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RuntimeOptions",
			Handler:    _InstanceCustomisationPlugin_RuntimeOptions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "customisation.proto",
}
